/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package whacamatrix;

import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.prefs.Preferences;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author kroepelin
 */
public class Window extends javax.swing.JFrame {

    private MatrixPanel mp;
    private GerschgorinCirclesPanel gcp;
    private MatrixDisplay md;
    private OrthogonalPanel op;

    /**
     * Creates new form Window
     */
    public Window() throws Exception {
        initComponents();

        Matrix m = Matrix.random(6, 6, -20, 20);

        mp = new MatrixPanel(m);
        gcp = new GerschgorinCirclesPanel(mp);
        md = new MatrixDisplay(mp);
        op = new OrthogonalPanel(mp);

        tabP.insertTab("Jacobi", null, mp, "Jacobi algorith", 0);
        tabP.insertTab("Gerschgorin", null, gcp, "Gerschgorin circles", 1);
        tabP.insertTab("Matrix", null, md, "The matrix", 2);
        tabP.insertTab("Orthogonal", null, op, "The orthogonal transformation", 3);

        whacHighestB.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON3) {
                    try {
                        int iter = Integer.parseInt(JOptionPane.showInputDialog(null, "How many times?", "1"));
                        mp.whacHighest(iter);
                        if (tabP.getSelectedIndex() == 2) {
                            md.updateTextfields(mp);
                        }
                        repaint();
                    } catch (Exception exc) {
                    }
                }
            }

        });

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabP = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        whacHighestB = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        rndMatMi = new javax.swing.JMenuItem();
        entMatMi = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        helpMi = new javax.swing.JMenuItem();
        settingsMi = new javax.swing.JMenuItem();
        aboutMi = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Whac A Matrix");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        getContentPane().add(tabP, java.awt.BorderLayout.CENTER);

        whacHighestB.setText("Whac highest for me!");
        whacHighestB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whacHighestBActionPerformed(evt);
            }
        });
        jPanel1.add(whacHighestB);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jMenu1.setText("Matrix");

        rndMatMi.setText("New Random Matrix");
        rndMatMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rndMatMiActionPerformed(evt);
            }
        });
        jMenu1.add(rndMatMi);

        entMatMi.setText("Enter New Matrix");
        entMatMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entMatMiActionPerformed(evt);
            }
        });
        jMenu1.add(entMatMi);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("?");

        helpMi.setText("Help");
        helpMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMiActionPerformed(evt);
            }
        });
        jMenu2.add(helpMi);

        settingsMi.setText("Settings");
        settingsMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMiActionPerformed(evt);
            }
        });
        jMenu2.add(settingsMi);

        aboutMi.setText("About");
        aboutMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMiActionPerformed(evt);
            }
        });
        jMenu2.add(aboutMi);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rndMatMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rndMatMiActionPerformed
        try {
            int n = Integer.parseInt(JOptionPane.showInputDialog(this, "Size of matrix (min. 3):", "6"));
            if (n < 3) {
                return;
            }
            mp.beginWith(Matrix.random(n, n, -10, 10));
            op.reset();
            setTitle("Whac A " + n + " x " + n + " Matrix");
            repaint();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_rndMatMiActionPerformed

    private void whacHighestBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whacHighestBActionPerformed
        mp.whacHighest();
        if (tabP.getSelectedIndex() == 2) {
            md.updateTextfields(mp);
        }
        repaint();
    }//GEN-LAST:event_whacHighestBActionPerformed

    private void aboutMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMiActionPerformed
        JOptionPane.showMessageDialog(this, "<html><center><b>Whac A Matrix<b><br><hr>Andreas Kr√∂pelin, 2018</center></html>", "Whac A Matrix", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMiActionPerformed

    private void helpMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMiActionPerformed
        String h = "";
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream("help.html")));
            String line;
            while ((line = br.readLine()) != null) {
                h += line;
            }
            JOptionPane.showMessageDialog(this, h, "Whac A Matrix", JOptionPane.INFORMATION_MESSAGE);

        } catch (FileNotFoundException fnfe) {
        } catch (IOException | NullPointerException e) {
        }


    }//GEN-LAST:event_helpMiActionPerformed

    private void settingsMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMiActionPerformed
        Preferences prefs = WhacAMatrix.prefs;

        JCheckBox diffCb = new JCheckBox("Display difference between steps of Jacobi iteration");
        JCheckBox histCb = new JCheckBox("Display the development of Gerschgorin circle midpoints and diameters");
        JSpinner sp = new JSpinner(new SpinnerNumberModel(1, 1, 100, 1));
        JTextField orthTf = new JTextField();
        JRadioButton edgesRB = new JRadioButton("Draw only edges in transformation visualization");
        JRadioButton facesRB = new JRadioButton("Draw faces in transformation visualization");
        ButtonGroup bgr = new ButtonGroup();
        bgr.add(edgesRB);
        bgr.add(facesRB);

        histCb.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                sp.setEnabled(histCb.isSelected());
            }
        });
        diffCb.setSelected(prefs.getBoolean("diff", false));
        histCb.setSelected(prefs.getBoolean("hist", false));
        sp.setValue(prefs.getInt("speed", 1));
        orthTf.setText(prefs.get("orth", "JACOBI"));
        edgesRB.setSelected(prefs.getBoolean("edges", true));
        facesRB.setSelected(!prefs.getBoolean("edges", true));
        sp.setEnabled(histCb.isSelected());

        int option = JOptionPane.showConfirmDialog(this, new JComponent[]{
            diffCb,
            histCb,
            new JLabel("Speed of development display:"),
            sp,
            new JLabel("Text to visualize orthogonal transformation:"),
            orthTf,
            edgesRB,
            facesRB
        }, "Settings", JOptionPane.OK_CANCEL_OPTION);

        if (option == JOptionPane.OK_OPTION) {
            prefs.putBoolean("diff", diffCb.isSelected());
            prefs.putBoolean("hist", histCb.isSelected());
            prefs.putInt("speed", ((Number) sp.getValue()).intValue());
            prefs.put("orth", orthTf.getText());
            prefs.putBoolean("edges", edgesRB.isSelected());
        }
    }//GEN-LAST:event_settingsMiActionPerformed

    private void entMatMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entMatMiActionPerformed
        try {
            int n = Integer.parseInt(JOptionPane.showInputDialog(this, "Size of matrix (min. 3):", "6"));
            if (n < 3) {
                return;
            }
            MatrixDisplay newMD = new MatrixDisplay(n, n);
            newMD.setPreferredSize(new Dimension(500, 500));
            JComboBox symmCB = new JComboBox(new String[]{
                "<html>( A + A<sup>T</sup> ) / 2</html>",
                "<html>A + A<sup>T</sup></html>",
                "<html>A A<sup>T</sup></html>",
                "<html>A<sup>T</sup> A</html>",
                "mirror upper half",
                "mirror lower half"});
            int option = JOptionPane.showConfirmDialog(this, new JComponent[]{newMD, symmCB}, "Enter the new matrix (will be made symmetric):", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                Matrix m = newMD.getEnteredMatrix();

                switch (symmCB.getSelectedIndex()) {
                    case 0:
                        m = Matrix.add(m, m.transpose()).scale(0.5);
                        break;
                    case 1:
                        m = Matrix.add(m, m.transpose());
                        break;
                    case 2:
                        m = Matrix.mult(m, m.transpose());
                        break;
                    case 3:
                        m = Matrix.mult(m.transpose(), m);
                        break;
                    case 4:
                        m = m.mirrorUpperHalf();
                        break;
                    case 5:
                        m = m.mirrorLowerHalf();
                        break;
                }

                mp.beginWith(m);
                op.reset();
                setTitle("Whac A " + n + " x " + n + " Matrix");
            }
            repaint();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_entMatMiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMi;
    private javax.swing.JMenuItem entMatMi;
    private javax.swing.JMenuItem helpMi;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem rndMatMi;
    private javax.swing.JMenuItem settingsMi;
    private javax.swing.JTabbedPane tabP;
    private javax.swing.JButton whacHighestB;
    // End of variables declaration//GEN-END:variables
}
